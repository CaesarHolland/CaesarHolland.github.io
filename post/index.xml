<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://caesarholland.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Feb 2020 21:52:07 +0800</lastBuildDate>
    
	<atom:link href="https://caesarholland.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Polynomial</title>
      <link>https://caesarholland.github.io/post/polynomial/</link>
      <pubDate>Sat, 01 Feb 2020 21:52:07 +0800</pubDate>
      
      <guid>https://caesarholland.github.io/post/polynomial/</guid>
      <description>Polynomial problom solving . There are many solotion you were looking for , so come in to look around.
一元高次多项式的求解问题 Preface 一元四次一下的多项式的求解都可以找到根的计算公式，四次多项式的攻破给当时的数学家以极大的热情扑向一元五次多项式的求解； 但是，从16世纪中叶到19世纪初，这300年间，诸如欧拉、拉格朗日这些数学家们都做过一些尝试但都没有成功，后来拉格朗日觉得 这个东西是无解的吧！然后高斯也意识到了这个问题，然后blablabla······直到法国英雄Golois伽罗华的降临，他的天才促进了今 天我们称之为抽象代数这门学科的蓬勃发展！！~~ 伽罗华的思想就是把 f(x)=0 的求解问题转化为确定对应的伽罗华群是否为所谓 可解群的问题； 可解群是群论中的一个重要内容，曾有一个著名的猜测叫Burnside猜测， 说就奇数个元素的有限群是可解群。这个问题在1963年已被数学家Feit和 Thompson解决，啊证明很长，有闲的同学可以看论文——《太平洋数学杂志1963年刊》；结论就是，不可解群有很多例如n&amp;gt;=5时就是不 可解群··· 也就是说他真的是不可解的····  ····但不代表我们弄不到近似解 , 今天我们主要通过牛顿法求一下近似解:
 牛顿切线法(迭代法) 1 设定x* 是方程f(x)=0的根，选取x0作为x* 的近似值，过点(x0, f(x0))做曲线f(x)=0的切线L，L的方程y=f(x0)+f&amp;rsquo;(x0)(x-x0)，求出L与x轴焦点的横坐标x1=x0-f(x0)/f&amp;rsquo;(x0)，称x1为x*的一次近似值，然后设置x0=x1，重复上面的过程，反复迭代，就可以得到一个比较精确的近似值。
Code 这是一个开放的程序，你可以输入不同的迭代次数观察不同的f值的变化； 代码部分见库——Newton_polynomial.cpp;   牛顿迭代法 2 该算法做了一定优化，与上面相比增加了许多判断以及筛查机制，并增加了误差范围显示【Error range】，但核心公式没有变化； 在初始化函数时我把误差限范围参数esp也设置成用户可自定义来观察其变化，建议值为1；
cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b&amp;gt;&amp;gt;eps; double temp = Polynomial_Root(c,n,a,b,eps); a和b为参数可能存在的范围，要保证参数在此范围内一定存在; 另外的内容代码中有详细注释，在此就不再叙述了;
Code 代码部分见库——Opt_ntPoly.cpp;   GSL库，可以利用该数学函数库求解多项式 该库包含多项式求解器 gsl_poly_complex_solve ，可以一次性求出所有解，求解原理仍然是迭代法，但算法经过优化，提高精准度；具体文档部分可以在 GCL_POLY找到。</description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>https://caesarholland.github.io/post/blog/</link>
      <pubDate>Sat, 01 Feb 2020 21:16:00 +0800</pubDate>
      
      <guid>https://caesarholland.github.io/post/blog/</guid>
      <description>Linux system study record   目前使用的是Ubuntu，不过命令在各个版本的Linux上大都是通用的
  常用的shell命令    command function     ls 目录信息查看   cd 目录切换   pwd 当前路径显示   uname 系统信息查看   clear 清理屏幕   cat 显示文件内容   sudo 切换用户身份   cp 文件拷贝   su 切换用户   mv 移动文件   mkdir 创建文件夹   touch 创建文件   rm 删除   rmdir 目录删除   ifconfig 显示网络配置信息，需要安装net-tools，根据提示安装   reboot 重启   poweroff 关机   man 系统帮助   sync 数据同步写入磁盘   find 查找文件   grep 查找内容   du 文件夹大小查看   df 磁盘空间查看   gedit 使用gedit打开某文件   ps 当前的系统进程查看   top 进程实时运行状态查看   file 文件类型查看     Install software by API 使用apt包管理工具需要root权限，所以命令格式为： sudo apt-get install [software name] 19版本的Ubuntu好像不需要加get了</description>
    </item>
    
  </channel>
</rss>